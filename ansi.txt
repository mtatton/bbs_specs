                                ANSI escape code

 From Wikipedia, the free encyclopedia

                             ANSI X3.64 (ISO 6429)
 Output of the system-monitor htop, an ncurses-application (which uses SGR and
 other ANSI/ISO control sequences).
                             ECMA-48
                             ISO/IEC 6429
         Standard            FIPS 86
                             ANSI X3.64
                             JIS X 0211
      Classification       ISO/IEC 2022 based control code and control sequence
                           set
 Other related encoding(s) Other control function standards: ITU T.101, JIS X
                           0207, ISO 6630, DIN 31626, ETS 300 706
   • v
   • t
   • e


 ANSI escape sequences are a standard for in-band signaling to control cursor
 location, color, font styling, and other options on video text terminals and
 terminal emulators. Certain sequences of bytes, most starting with an ASCII
 escape character and a bracket character, are embedded into text. The terminal
 interprets these sequences as commands, rather than text to display verbatim.

 ANSI sequences were introduced in the 1970s to replace vendor-specific
 sequences and became widespread in the computer equipment market by the early
 1980s. They are used in development, scientific, commercial text-based
 applications as well as bulletin board systems to offer standardized
 functionality.

 Although hardware text terminals have become increasingly rare in the 21st
 century, the relevance of the ANSI standard persists because a great majority
 of terminal emulators and command consoles interpret at least a portion of the
 ANSI standard.

Contents

   • 1 History
   • 2 Platform support

        • 2.1 Unix-like systems
        • 2.2 DOS, OS/2, and Windows
        • 2.3 Atari ST
        • 2.4 AmigaOS
        • 2.5 VMS / OpenVMS

   • 3 Description

        • 3.1 Control characters
        • 3.2 Fe Escape sequences
        • 3.3 CSI (Control Sequence Introducer) sequences
        • 3.4 SGR (Select Graphic Rendition) parameters

             • 3.4.1 Colors

                  • 3.4.1.1 3-bit and 4-bit
                  • 3.4.1.2 8-bit
                  • 3.4.1.3 24-bit
                  • 3.4.1.4 Unix environment variables relating to color
                    support

        • 3.5 OSC (Operating System Command) sequences
        • 3.6 Fs Escape sequences
        • 3.7 Fp Escape sequences
        • 3.8 nF Escape sequences
        • 3.9 Examples

             • 3.9.1 In shell scripting
             • 3.9.2 In C

        • 3.10 Terminal input sequences

   • 4 See also
   • 5 Notes
   • 6 References
   • 7 External links

History[edit]

 Almost all manufacturers of video terminals added vendor-specific escape
 sequences to perform operations such as placing the cursor at arbitrary
 positions on the screen. One example is the VT52 terminal, which allowed the
 cursor to be placed at an x,y location on the screen by sending the ESC
 character, a Y character, and then two characters representing with numerical
 values equal to the x,y location plus 32 (thus starting at the ASCII space
 character and avoiding the control characters). The Hazeltine 1500 had a
 similar feature, invoked using ~, DC1 and then the X and Y positions separated
 with a comma. While the two terminals had identical functionality in this
 regard, different control sequences had to be used to invoke them.

 As these sequences were different for different terminals, elaborate libraries
 such as termcap ("terminal capabilities") and utilities such as tput had to be
 created so programs could use the same API to work with any terminal. In
 addition, many of these terminals required sending numbers (such as row and
 column) as the binary values of the characters; for some programming
 languages, and for systems that did not use ASCII internally, it was often
 difficult to turn a number into the correct character.

 The ANSI standard attempted to address these problems by making a command set
 that all terminals would use and requiring all numeric information to be
 transmitted as ASCII numbers. The first standard in the series was ECMA-48,
 adopted in 1976.^[1] It was a continuation of a series of character coding
 standards, the first one being ECMA-6 from 1965, a 7-bit standard from which
 ISO 646 originates. The name "ANSI escape sequence" dates from 1979 when ANSI
 adopted ANSI X3.64. The ANSI X3L2 committee collaborated with the ECMA
 committee TC 1 to produce nearly identical standards. These two standards were
 merged into an international standard, ISO 6429.^[1] In 1994, ANSI withdrew
 its standard in favor of the international standard.

 DEC VT100 terminal
 The DEC VT100 video display terminal.

 The first popular video terminal to support these sequences was the Digital
 VT100, introduced in 1978.^[2] This model was very successful in the market,
 which sparked a variety of VT100 clones, among the earliest and most popular
 of which was the much more affordable Zenith Z-19 in 1979.^[3] Others included
 the Qume QVT-108, Televideo TVI-970, Wyse WY-99GT as well as optional "VT100"
 or "VT103" or "ANSI" modes with varying degrees of compatibility on many other
 brands. The popularity of these gradually led to more and more software
 (especially bulletin board systems and other online services) assuming the
 escape sequences worked, leading to almost all new terminals and emulator
 programs supporting them.

 In 1981, ANSI X3.64 was adopted for use in the US government by FIPS
 publication 86. Later, the US government stopped duplicating industry
 standards, so FIPS pub. 86 was withdrawn.^[4]

 ECMA-48 has been updated several times and is currently at its 5th edition,
 from 1991. It is also adopted by ISO and IEC as standard ISO/IEC 6429.^[5] A
 version is adopted as a Japanese Industrial Standard, as JIS X 0211.

 Related standards include ITU T.61, the Teletex standard, and the ISO/IEC
 8613, the Open Document Architecture standard (mainly ISO/IEC 8613-6 or ITU
 T.416). The two systems share many escape codes with the ANSI system, with
 extensions that are not necessarily meaningful to computer terminals. Both
 systems quickly fell into disuse, but ECMA-48 does mark the extensions used in
 them as reserved.

Platform support[edit]

  Unix-like systems[edit]

 On these systems the terminal (or emulator) self-identifies using the $TERM
 environment variable. A database library such as termcap or terminfo would
 perform a lookup to derive the capabilities of the terminal and specific
 escape sequences to use the capabilities, which may deviate from ANSI in early
 days.

 Although such libraries were primarily developed on and for Unix, by the
 mid-1980s programs running on Unix-like operating systems could almost always
 assume they were using a terminal or emulator that supported ANSI
 sequences;^[citation needed] this led to widespread use of ANSI by programs
 running on those platforms. For instance, many games and shell scripts, and
 utilities such as color directory listings, directly write the ANSI sequences
 and thus cannot be used on a terminal that does not interpret them. Many
 programs, including text editors such as vi and GNU Emacs, use termcap or
 terminfo, or use libraries such as curses that use termcap or terminfo, and
 thus in theory support non-ANSI terminals, but this is so rarely tested
 nowadays that they are unlikely to work with those terminals.^[citation
 needed]

 Xterm terminal emulator
 The Xterm terminal emulator.

 Terminal emulators for communicating with local programs as well as remote
 machines and the text system console almost always support ANSI escape codes.
 This includes terminal emulators such as xterm, rxvt, GNOME Terminal, and
 Konsole on systems with X11-based or Wayland-based window systems, and
 Terminal.app and third-party terminal emulators such as iTerm2 on macOS.

  DOS, OS/2, and Windows[edit]

 MS-DOS 1.x did not support the ANSI or any other escape sequences. Only a few
 control characters (BEL, CR, LF, BS) were interpreted by the underlying BIOS,
 making it almost^[a] impossible to do any kind of full-screen application. Any
 display effects had to be done with BIOS calls, which were notoriously slow,
 or by directly manipulating the IBM PC hardware.

 DOS 2.0 introduced the ability to add a device driver for the ANSI escape
 sequences – the de facto standard being
 Link: 
 ANSI.SYS, but others like
 Link: 
 ANSI.COM,^[6]
 Link: 
 NANSI.SYS^[7] and
 Link: 
 ANSIPLUS.EXE are used as well (these are considerably faster as they bypass
 the BIOS). Slowness and the fact that it was not installed by default made
 software rarely take advantage of it; instead, applications continued to
 directly manipulate the hardware to get the text display needed.^[citation
 needed] ANSI.SYS and similar drivers continued to work in Windows 9x up to
 Windows Me, and in NT-derived systems for 16-bit legacy programs executing
 under the NTVDM.

 Many clones of DOS were able to interpret the sequences and do not require a
 separate ANSI driver to be loaded. PTS-DOS^[8]^[9] as well as Concurrent DOS,
 Multiuser DOS^[10] and REAL/32 have built-in support (plus a number of
 extensions). OS/2 had an
 Link: 
 ANSI command that enabled the sequences.

 The Windows Console did not support ANSI escape sequences, nor did Microsoft
 provide any method to enable them. Some replacements or additions for the
 console window such as JP Software's TCC (formerly 4NT), Michael J. Mefford's
 ANSI.COM, Jason Hood's
 Link: 
 ANSICON^[11] and Maximus5's ConEmu interpreted ANSI escape sequences printed
 by programs. A Python package^[12] internally interpreted ANSI escape
 sequences in text being printed, translating them to calls to manipulate the
 color and cursor position, to make it easier to port Python code using ANSI to
 Windows. Cygwin performs similar translation to all output written to the
 console using Cygwin file descriptors, the filtering is done by the output
 functions of
 Link: 
 cygwin1.dll, to allow porting of POSIX C code to Windows.

 In 2016, Microsoft released the Windows 10 version 1511 update which
 unexpectedly implemented support for ANSI escape sequences, over two decades
 after the debut of Windows NT.^[13] This was done alongside Windows Subsystem
 for Linux, allowing Unix-like terminal-based software to use the sequences in
 Windows Console. Unfortunately this defaults to off, but Windows PowerShell
 5.1 enabled it. PowerShell 6 made it possible to embed the necessary ESC
 character into a string with `e.^[14] Windows Terminal, introduced in 2019,
 supports the sequences by default, and Microsoft intends to replace the
 Windows Console with Windows Terminal.^[15]

  Atari ST[edit]

 The Atari ST used the command system adapted from the VT52 with some
 expansions for color support,^[16] rather than supporting ANSI escape codes.

  AmigaOS[edit]

 AmigaOS not only interprets ANSI code sequences for text output to the screen,
 the AmigaOS printer driver also interprets them (with extensions proprietary
 to AmigaOS) and translates them into the codes required for the particular
 printer that is actually attached.^[17]

      Amiga CLI (shell) window style control ssequences^[citation needed]
                                                      Effect
 Link:  Sets maximum length of lines in window to
 ESC [ n u                          n.
 Link:  Sets maximum number of lines in window to
 ESC [ n t                          n.
 Link:  Starts text n pixels from left edge of
 ESC [ n x                          window.
 Link:  Starts text n pixels from top edge of
 ESC [ n y                          window.


  VMS / OpenVMS[edit]

 VMS was designed to be managed interactively using Digital's text-based video
 terminals such as the aforementioned VT100; later with graphical terminal
 emulators such as the VWS Terminal, DECTerm, and xterm.^[18]

Description[edit]

  Control characters[edit]

 Though not technically part of the standard, almost all users assume some
 functions of some single-byte characters. This is used to shorten the amount
 of data transmitted, or to perform some functions that are unavailable from
 escape sequences:

                 Popular control characters (not an exhaustive list)
             ^                C0              Abbr               Name       Effect
Link:                             Link:                                  Makes an
 7     Bell      audible
^G                                BEL                                    noise.
                                                                         Moves the
                                                                         cursor left
Link:                             Link:                                  (but may
 8     Backspace "backwards
^H                                BS                                     wrap" if
                                                                         cursor is at
                                                                         start of
                                                                         line).
                                                                         Moves the
Link:                             Link:                                  cursor right
 9     Tab       to next
^I                                HT                                     multiple of
                                                                         8.
                                                                         Moves to next
                                                                         line, scrolls
                                                                         the display
                                                                         up if at
                                                                         bottom of the
Link:                             Link:                                  screen.
 0x0A  Line Feed Usually does
^J                                LF                                     not move
                                                                         horizontally,
                                                                         though
                                                                         programs
                                                                         should not
                                                                         rely on this.
                                                                         Move a
                                                                         printer to
                                                                         top of next
                                                                         page. Usually
                                                                         does not move
Link:                             Link:                                  horizontally,
 0x0C  Form Feed though
^L                                FF                                     programs
                                                                         should not
                                                                         rely on this.
                                                                         Effect on
                                                                         video
                                                                         terminals
                                                                         varies.
Link:                             Link:                        Carriage  Moves the
 0x0D  Return    cursor to
^M                                CR                                     column zero.
Link:                             Link:                                  Starts all
 0x1B  Escape    the escape
^[                                ESC                                    sequences


 Escape sequences vary in length. The general format for an ANSI-compliant
 escape sequence is defined by ANSI X3.41 (equivalent to ECMA-35 or ISO/IEC
 2022).^[19]^: 13.1  The escape sequences consist only of bytes in the range
 Link: 
 0x20—0x7F (all the non-control ASCII characters), and can be parsed without
 looking ahead. The behavior when a control character, a byte with the high bit
 set, or a byte that is not part of any valid sequence, is encountered before
 the end is undefined.

  Fe Escape sequences[edit]

 If the ESC is followed by a byte in the range 0x40 to 0x5F it is of this type.
 Delegated to the applicable C1 control code standard.^[19]^: 13.2.1 ^[sentence
 fragment] Accordingly, all escape sequences corresponding to C1 control codes
 from ANSI X3.64 / ECMA-48 follow this format.^[5]^: 5.3.a 

 The standard says that, in 8-bit environments, the control functions
 corresponding to type Fe escape sequences (those from the set of C1 control
 codes) can be represented as single bytes in the 0x80–0x9F range.^[5]^: 5.3.b 
 However, on modern devices those codes are often used for other purposes, such
 as parts of UTF-8 or for CP-1252 characters, so only the 2-byte sequence is
 typically used. In the case of UTF-8 a C1 control code can be encoded as two
 bytes (e.g.
 Link: 
 0xC2,0x8E for
 Link: 
 U+008E), but no space is saved this way.

                                                             Some type
                                                 Link: 
                                 Fe (C1 set element) ANSI escape sequences (not an exhaustive list)
            Code                          C1                          Abbr                Name                  Effect
                                                                                                   Select a single character from
Link:                        Link:                        Link:                                    one of the alternative character
   Single      sets. SS2 selects the G2
ESC N                        0x8E                         SS2                          Shift Two   character set, and SS3 selects
                                                                                                   the G3 character set.^[20] In a
                                                                                                   7-bit environment, this is
                                                                                                   followed by one or more GL bytes
Link:                        Link:                        Link:                                    (0x20–0x7F) specifying a
   Single      character from that
ESC O                        0x8F                         SS3                          Shift Three set.^[19]^: 9.4  In an 8-bit
                                                                                                   environment, these may instead be
                                                                                                   GR bytes (0xA0–0xFF).^[19]^: 8.4 
                                                                                                   Terminated by ST.^[5]^: 5.6 
Link:                        Link:                        Link:                        Device      Xterm's uses of this sequence
   Control     include defining User-Defined
ESC P                        0x90                         DCS                          String      Keys, and requesting or setting
                                                                                                   Termcap/Terminfo data.^[20]
Link:                        Link:                        Link:                        Control     Starts most of the useful
   Sequence    sequences, terminated by a byte
ESC [                        0x9B                         CSI                          Introducer  in the range 0x40 through
                                                                                                   0x7E.^[5]^: 5.4 
Link:                        Link:                        Link:                        String      Terminates strings in other
   Terminator  controls.^[5]^: 8.3.143 
ESC \                        0x9C                         ST
Link:                        Link:                        Link:                        Operating   Starts a control string for the
   System      operating system to use,
ESC ]                        0x9D                         OSC                          Command     terminated by ST.^[5]^: 8.3.89 
                                                                                                   Takes an argument of a string of
Link:                        Link:                        Link:                                    text, terminated by
   Start of    ST.^[5]^: 5.6  The uses for these
ESC X                        0x98                         SOS                          String      string control sequences are
                                                                                                   defined by the
                                                                                                   application^[5]^: 8.3.2, 8.3.128 
                                                                                                   or privacy
Link:                        Link:                        Link:                                    discipline.^[5]^: 8.3.94  These
   Privacy     functions are rarely implemented
ESC ^                        0x9E                         PM                           Message     and the arguments are ignored by
                                                                                                   xterm.^[20] Some Kermit clients
                                                                                                   allow the server to automatically
                                                                                                   execute Kermit commands on the
Link:                        Link:                        Link:                        Application client by embedding them in APC
   Program     sequences; this is a potential
ESC _                        0x9F                         APC                          Command     security risk if the server is
                                                                                                   untrusted.^[21]




  CSI (Control Sequence Introducer) sequences[edit]

 For Control Sequence Introducer, or CSI, commands, the ESC [ is followed by
 any number (including none) of "parameter bytes" in the range 0x30–0x3F (ASCII
 0–9:;<=>?), then by any number of "intermediate bytes" in the range 0x20–0x2F
 (ASCII space and !"#$%&'()*+,-./), then finally by a single "final byte" in
 the range 0x40–0x7E (ASCII @A–Z[\]^_`a–z{|}~).^[5]^: 5.4 

 All common sequences just use the parameters as a series of
 semicolon-separated numbers such as 1;2;3. Missing numbers are treated as 0
 (1;;3 acts like the middle number is 0, and no parameters at all in ESC[m acts
 like a 0 reset code). Some sequences (such as CUU) treat 0 as 1 in order to
 make missing parameters useful.^[5]^: F.4.2 

 A subset of arrangements was declared "private" so that terminal manufacturers
 could insert their own sequences without conflicting with the standard.
 Sequences containing the parameter bytes <=>? or the final bytes 0x70–0x7E
 (p–z{|}~) are private.

 The behavior of the terminal is undefined in the case where a CSI sequence
 contains any character outside of the range 0x20–0x7E. These illegal
 characters are either C0 control characters (the range 0–0x1F), DEL (0x7F), or
 bytes with the high bit set. Possible responses are to ignore the byte, to
 process it immediately, and furthermore whether to continue with the CSI
 sequence, to abort it immediately, or to ignore the rest of it.^[citation
 needed]

              Some ANSI control sequences (not an exhaustive list)
 Code              Abbr                Name                 Effect
 CSI n Link:
 A      Cursor Up
       CUU
 CSI n Link:                                    Moves the cursor n (default 1)
 B      Cursor Down cells in the given direction.
       CUD                                      If the cursor is already at the
 CSI n Link:                        Cursor      edge of the screen, this has no
 C      Forward     effect.
       CUF
 CSI n Link:
 D      Cursor Back
       CUB
 CSI n Link:                        Cursor Next Moves cursor to beginning of
 E      Line        the line n (default 1) lines
       CNL                                      down. (not ANSI.SYS)
 CSI n Link:                        Cursor      Moves cursor to beginning of
 F      Previous    the line n (default 1) lines
       CPL                          Line        up. (not ANSI.SYS)
 CSI n Link:                        Cursor      Moves the cursor to column n
 G      Horizontal  (default 1). (not ANSI.SYS)
       CHA                          Absolute
                                                Moves the cursor to row n,
                                                column m. The values are
       Link:                                    1-based, and default to 1 (top
 CSI n  Cursor      left corner) if omitted. A
 ; m H CUP                          Position    sequence such as CSI ;5H is a
                                                synonym for CSI 1;5H as well as
                                                CSI 17;H is the same as CSI 17H
                                                and CSI 17;1H
                                                Clears part of the screen. If n
                                                is 0 (or missing), clear from
                                                cursor to end of screen. If n
                                                is 1, clear from cursor to
                                                beginning of the screen. If n
 CSI n Link:                        Erase in    is 2, clear entire screen (and
 J      Display     moves cursor to upper left on
       ED                                       DOS ANSI.SYS). If n is 3, clear
                                                entire screen and delete all
                                                lines saved in the scrollback
                                                buffer (this feature was added
                                                for xterm and is supported by
                                                other terminal applications).
                                                Erases part of the line. If n
                                                is 0 (or missing), clear from
 CSI n Link:                        Erase in    cursor to the end of the line.
 K      Line        If n is 1, clear from cursor to
       EL                                       beginning of the line. If n is
                                                2, clear entire line. Cursor
                                                position does not change.
       Link:                                    Scroll whole page up by n
 CSI n  Scroll Up   (default 1) lines. New lines
 S     SU                                       are added at the bottom. (not
                                                ANSI.SYS)
       Link:                                    Scroll whole page down by n
 CSI n  Scroll Down (default 1) lines. New lines
 T     SD                                       are added at the top. (not
                                                ANSI.SYS)
                                                Same as CUP, but counts as a
                                                format effector function (like
                                                Link:
                                                
       Link:                        Horizontal  CR or
 CSI n  Vertical    Link:
 ; m f HVP                          Position    
                                                LF) rather than an editor
                                                function (like CUD or CNL).
                                                This can lead to different
                                                handling in certain terminal
                                                modes.^[5]^: Annex A 
 CSI n Link:                        Select      Sets colors and style of the
 m      Graphic     characters following this code
       SGR                          Rendition
 CSI                                AUX Port On Enable aux serial port usually
 5i                                             for local serial printer
 CSI                                AUX Port    Disable aux serial port usually
 4i                                 Off         for local serial printer
       Link:                        Device      Reports the cursor position
 CSI    Status      (CPR) by transmitting ESC[n;mR,
 6n    DSR                          Report      where n is the row and m is the
                                                column.)


                         Some popular private sequences
   Code               Abbr               Name                Effect
                                                 Saves the cursor
          Link:                        Save      position/state in SCO console
 CSI s     Current   mode.^[22] In vertical split
          SCP, SCOSC                   Cursor    screen mode, instead used to
                                       Position  set (as CSI n ; n s) or reset
                                                 left and right margins.^[23]
          Link:                        Restore   Restores the cursor
 CSI u     Saved     position/state in SCO console
          RCP, SCORC                   Cursor    mode.^[24]
                                       Position
 CSI ? 25 Link:                                  Shows the cursor, from the
 h                   VT220.
          DECTCEM
 CSI ? 25 Link:
 l                   Hides the cursor.
          DECTCEM
 CSI ?                                           Enable alternative screen
 1049 h                                          buffer, from xterm
 CSI ?                                           Disable alternative screen
 1049 l                                          buffer, from xterm
                                                 Turn on bracketed paste
                                                 mode.^[25] In bracketed paste
                                                 mode, text pasted into the
                                                 terminal will be surrounded by
                                                 ESC [200~ and ESC [201~;
 CSI ?                                           programs running in the
 2004 h                                          terminal should not treat
                                                 characters bracketed by those
                                                 sequences as commands (Vim,
                                                 for example, does not treat
                                                 them as commands).^[26] From
                                                 xterm^[27]
 CSI ?                                           Turn off bracketed paste mode.
 2004 l


  SGR (Select Graphic Rendition) parameters[edit]

 Select Graphic Rendition (SGR) sets display attributes. Several attributes can
 be set in the same sequence, separated by semicolons.^[28] Each display
 attribute remains in effect until a following occurrence of SGR resets it.^[5]
 If no codes are given, CSI m is treated as CSI 0 m (reset / normal).

              n                    Name                     Note
 Link:
  Reset or normal All attributes off
 0
 Link:                        Bold or         As with faint, the color change
  increased       is a PC (SCO / CGA)
 1                            intensity       invention.^[29]^[better source
                                              needed]
 Link:                        Faint,
  decreased       May be implemented as a light
 2                            intensity, or   font weight like bold.^[30]
                              dim
 Link:                                        Not widely supported. Sometimes
  Italic          treated as inverse or blink.^[29]
 3
 Link:                                        Style extensions exist for Kitty,
  Underline       VTE, mintty and iTerm2.^[31]^[32]
 4
 Link:                                        Sets blinking to less than 150
  Slow blink      times per minute
 5
 Link:                                        MS-DOS ANSI.SYS, 150+ per minute;
  Rapid blink     not widely supported
 6
 Link:                        Reverse video   Swap foreground and background
  or invert       colors; inconsistent
 7                                            emulation^[33]
 Link:
  Conceal or hide Not widely supported.
 8
 Link:                        Crossed-out, or Characters legible but marked as
  strike          if for deletion. Not supported in
 9                                            Terminal.app
 Link:                        Primary
  (default) font
 10
 Link:                        Alternative
  font            Select alternative font n − 10
 11–19
 Link:                        Fraktur
  (Gothic)        Rarely supported
 20
                                              Double-underline per
 Link:                        Doubly          ECMA-48,^[5]^: 8.3.117  but
  underlined; or: instead disables bold intensity
 21                           not bold        on several terminals, including
                                              in the Linux kernel's console
                                              before version 4.17.^[34]
 Link:                        Normal          Neither bold nor faint; color
  intensity       changes where intensity is
 22                                           implemented as such.
 Link:                        Neither italic,
  nor blackletter
 23
 Link:                                        Neither singly nor doubly
  Not underlined  underlined
 24
 Link:
  Not blinking    Turn blinking off
 25
 Link:                        Proportional    ITU T.61 and T.416, not known to
  spacing         be used on terminals
 26
 Link:
  Not reversed
 27
 Link:
  Reveal          Not concealed
 28
 Link:
  Not crossed out
 29
 Link:                        Set foreground
  color
 30–37
 Link:                        Set foreground
  color           Next arguments are 5;n or 2;r;g;b
 38
 Link:                        Default         Implementation defined (according
  foreground      to standard)
 39                           color
 Link:                        Set background
  color
 40–47
 Link:                        Set background
  color           Next arguments are 5;n or 2;r;g;b
 48
 Link:                        Default         Implementation defined (according
  background      to standard)
 49                           color
 Link:                        Disable
  proportional    T.61 and T.416
 50                           spacing
 Link:
  Framed
 51                                           Implemented as "emoji variation
 Link:                                        selector" in mintty.^[35]
  Encircled
 52
 Link:
  Overlined       Not supported in Terminal.app
 53
 Link:                        Neither framed
  nor encircled
 54
 Link:
  Not overlined
 55
 Link:                                        Not in standard; implemented in
  Set underline   Kitty, VTE, mintty, and
 58                           color           iTerm2.^[31]^[32] Next arguments
                                              are 5;n or 2;r;g;b.
 Link:                        Default         Not in standard; implemented in
  underline color Kitty, VTE, mintty, and
 59                                           iTerm2.^[31]^[32]
 Link:                        Ideogram
  underline or
 60                           right side line
 Link:                        Ideogram double
  underline, or
 61                           double line on
                              the right side
 Link:                        Ideogram
  overline or     Rarely supported
 62                           left side line
 Link:                        Ideogram double
  overline, or
 63                           double line on
                              the left side
 Link:                        Ideogram stress
  marking
 64
 Link:                        No ideogram
  attributes      Reset the effects of all of 60–64
 65
 Link:
  Superscript
 73
 Link:
  Subscript       Implemented only in mintty^[35]
 74
 Link:                        Neither
  superscript nor
 75                           subscript
 Link:                        Set bright
  foreground
 90–97                        color           Not in standard; originally
 Link:                        Set bright      implemented by aixterm^[20]
  background
 100–107                      color

    Colors[edit]

      3-bit and 4-bit[edit]

 The original specification only had 8 colors, and just gave them names. The
 SGR parameters 30–37 selected the foreground color, while 40–47 selected the
 background. Quite a few terminals implemented "bold" (SGR code 1) as a
 brighter color rather than a different font, thus providing 8 additional
 foreground colors. Usually you could not get these as background colors,
 though sometimes inverse video (SGR code 7) would allow that. Examples: to get
 black letters on white background use ESC[30;47m, to get red use ESC[31m, to
 get bright red use ESC[1;31m. To reset colors to their defaults, use
 ESC[39;49m (not supported on some terminals), or reset all attributes with
 ESC[0m. Later terminals added the ability to directly specify the "bright"
 colors with 90–97 and 100–107.

 When hardware started using 8-bit digital-to-analog converters (DACs) several
 pieces of software assigned 24-bit color numbers to these names. The chart
 below shows the default values sent to the DAC for some common hardware and
 software; in most cases they are configurable.^[citation needed]

                                                                                 Windows XP     Windows      Visual   Windows 10                                                                               Eclipse
             FG                           BG               Name      VGA^[b]     Console^[c] PowerShell^[d]  Studio   Console^[f]  Terminal.app      PuTTY         mIRC           xterm        Ubuntu^[g]     Terminal
                                                                                                            Code^[e]
Link:                        Link:
  Black   0, 0, 0                                            12, 12, 12    0, 0, 0                                                    1, 1, 1       0, 0, 0
30                           40
Link:                        Link:                                                                          205, 49,
  Red     170, 0, 0      128, 0, 0                  49       197, 15, 31   194, 54, 33   187, 0, 0     127, 0, 0     205, 0, 0        222, 56, 43   205, 0, 0
31                           41
Link:                        Link:                                                                          13, 188,
  Green   0, 170, 0      0, 128, 0                  121      19, 161, 14   37, 188, 36   0, 187, 0     0, 147, 0     0, 205, 0        57, 181, 74   0, 205, 0
32                           42
Link:                        Link:                                                                          229,
  Yellow  170, 85, 0^[h] 128, 128, 0 238, 237, 240  229, 16  193, 156, 0   173, 173, 39  187, 187, 0   252, 127, 0   205, 205, 0      255, 199, 6   205, 205, 0
33                           43
Link:                        Link:                                                                          36, 114,
  Blue    0, 0, 170      0, 0, 128                  200      0, 55, 218    73, 46, 225   0, 0, 187     0, 0, 127     0, 0, 238^[36]   0, 111, 184   0, 0, 238
34                           44
Link:                        Link:                                                                          188, 63,
  Magenta 170, 0, 170    128, 0, 128 1, 36, 86      188      136, 23, 152  211, 56, 211  187, 0, 187   156, 0, 156   205, 0, 205      118, 38, 113  205, 0, 205
35                           45
Link:                        Link:                                                                          17, 168,
  Cyan    0, 170, 170    0, 128, 128                205      58, 150, 221  51, 187, 200  0, 187, 187   0, 147, 147   0, 205, 205      44, 181, 233  205, 0, 205
36                           46
Link:                        Link:                                                                          229,
  White   170, 170, 170  192, 192, 192              229, 229 204, 204, 204 203, 204, 205 187, 187, 187 210, 210, 210 229, 229, 229    204, 204, 204 229, 229, 229
37                           47
Link:                        Link:                        Bright                                            102,
  Black   85, 85, 85     128, 128, 128              102, 102 118, 118, 118 129, 131, 131 85, 85, 85    127, 127, 127 127, 127, 127    128, 128, 128 0, 0, 0
90                           100                          (Gray)
Link:                        Link:                        Bright                                            241, 76,
  Red     255, 85, 85    255, 0, 0                  76       231, 72, 86   252, 57, 31   255, 85, 85   255, 0, 0
91                           101
Link:                        Link:                        Bright                                            35, 209,
  Green   85, 255, 85    0, 255, 0                  139      22, 198, 12   49, 231, 34   85, 255, 85   0, 252, 0     0, 255, 0
92                           102
Link:                        Link:                        Bright                                            245,
  Yellow  255, 255, 85   255, 255, 0                245, 67  249, 241, 165 234, 236, 35  255, 255, 85  255, 255, 0
93                           103
Link:                        Link:                        Bright                                            59, 142,
  Blue    85, 85, 255    0, 0, 255                  234      59, 120, 255  88, 51, 255   85, 85, 255   0, 0, 252     92, 92, 255^[37] 0, 0, 255     92, 92, 255
94                           104
Link:                        Link:                        Bright                                            214,
  Magenta 255, 85, 255   255, 0, 255                112, 214 180, 0, 158   249, 53, 248  255, 85, 255  255, 0, 255
95                           105
Link:                        Link:                        Bright                                            41, 184,
  Cyan    85, 255, 255   0, 255, 255                219      97, 214, 214  20, 240, 240  85, 255, 255  0, 255, 255
96                           106
Link:                        Link:                        Bright                                            229,
  White   255, 255, 255                             229, 229 242, 242, 242 233, 235, 235 255, 255, 255
97                           107

      8-bit[edit]

 As 256-color lookup tables became common on graphic cards, escape sequences
 were added to select from a pre-defined set of 256 colors:^[citation needed]

ESC[38;5;⟨n⟩m Select foreground color
ESC[48;5;⟨n⟩m Select background color
  0-  7:  standard colors (as in ESC [ 30–37 m)
  8- 15:  high intensity colors (as in ESC [ 90–97 m)
 16-231:  6 × 6 × 6 cube (216 colors): 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)
232-255:  grayscale from black to white in 24 steps

 The ITU's T.416 Information technology - Open Document Architecture (ODA) and
 interchange format: Character content architectures^[38] uses ':' as separator
 characters instead:

ESC[38:5:⟨n⟩m Select foreground color      where n is a number from the table below
ESC[48:5:⟨n⟩m Select background color

                                      256-color mode — foreground: ESC[38;5;#m   background: ESC[48;5;#m
Standard colors                                                         High-intensity colors
                                           0   1   2   3   4   5   6   7    8   9  10 11 12 13 14 15
216 colors
16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51
52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87
88  89  90  91  92  93  94  95  96  97  98  99  100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123
124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159
160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231
Grayscale colors
                        232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255

 There has also been a similar but incompatible 88-color encoding using the
 same escape sequence, seen in rxvt and xterm-88color. Not much is known about
 the scheme besides the color codes. It uses a 4×4×4 color cube.

      24-bit[edit]

 As "true color" graphic cards with 16 to 24 bits of color became common,
 applications began to support 24-bit colors. Terminal emulators supporting
 setting 24-bit foreground and background colors with escape sequences include
 Xterm,^[20] KDE's Konsole,^[39]^[40] and iTerm, as well as all libvte based
 terminals,^[41] including GNOME Terminal.^[citation needed]

ESC[ 38;2;⟨r⟩;⟨g⟩;⟨b⟩ m Select RGB foreground color
ESC[ 48;2;⟨r⟩;⟨g⟩;⟨b⟩ m Select RGB background color

 The syntax is likely based on the ITU's T.416 Open Document Architecture (ODA)
 and interchange format: Character content architectures,^[38] which was
 adopted as ISO/IEC 8613-6 but ended up as a commercial failure.^[citation
 needed] The ODA version is more elaborate and thus incompatible:

   • The parameters after the '2', i.e. even the r,g,b are optional.
   • Semicolons are replaced by colons, as above.
   • There is a leading "colorspace ID".^[20] The definition of the colorspace
     ID is not included in that document so it may be blank to represent the
     unspecified default.
   • In addition to the '2' value after 48 to specify a Red-Green-Blue format
     (and the '5' above for a 0-255 indexed color), there are alternatives of
     '0' for implementation defined and '1' for transparent - neither of what
     have any further parameters; '3' specifies colors using a
     Cyan-Magenta-Yellow scheme, and '4' for a Cyan-Magenta-Yellow-Black one,
     the latter using the position marked as "unused" for the Black
     component:^[38]

ESC[ 38:2:⟨Color-Space-ID⟩:⟨r⟩:⟨g⟩:⟨b⟩:⟨unused⟩:⟨CS tolerance⟩:⟨Color-Space associated with tolerance: 0 for "CIELUV"; 1 for "CIELAB"⟩ m Select RGB foreground color
ESC[ 48:2:⟨Color-Space-ID⟩:⟨r⟩:⟨g⟩:⟨b⟩:⟨unused⟩:⟨CS tolerance⟩:⟨Color-Space associated with tolerance: 0 for "CIELUV"; 1 for "CIELAB"⟩ m Select RGB background color

 The ITU-RGB variation is supported by xterm, with the colorspace ID and
 tolerance parameters ignored. The simpler scheme using semicolons is initially
 found in Konsole.^[20]^: Can I set a color by its number? 

      Unix environment variables relating to color support[edit]

 Before termcap and terminfo could indicate support for colors, the S-Lang
 library used $COLORTERM to indicate whether a terminal emulator could use
 colors at all (later reinterpreted as 256-colors)^[42] and whether it supports
 24-bit color.^[43]^[44] This system, although poorly documented, became
 widespread enough for Fedora and RHEL to use it as a simpler and more
 universal detection mechanism compared to querying the now-updated
 libraries.^[45] However, gnome-terminal 3.14 dropped this variable as its
 authors considered it incorrect and no longer necessary.^[42]

 Some terminal emulators (urxvt, konsole) set $COLORFGBG to report the color
 scheme of the terminal (mainly light vs. dark background). This behavior
 originated in S-Lang^[44] and is used by vim. Again, gnome-terminal refuses to
 add this behavior, as the more "proper" xterm OSC 4/10/11 sequences already
 exist.^[46]

  OSC (Operating System Command) sequences[edit]

 Mostly these were defined by Xterm. For historical reasons xterm can end the
 command with BEL as well as the standard ST.^[20]

 Xterm allows the window title to be set by ESC ]0;this is the window title
 BEL.

 A non-xterm extension is the hyperlink, ESC ]8;;link ST from 2017, used by
 VTE,^[47]^[discuss] iTerm2,^[47] and mintty.^[48]

 The Linux console uses ESC ] P n rr gg bb to change the palette, which, if
 hard-coded into an application, may hang other terminals.^[49] However,
 appending ST will be ignored by Linux and form a proper, ignorable sequence
 for other terminals.^[citation needed]

  Fs Escape sequences[edit]

 If the ESC is followed by a byte in the range
 Link: 
 0x60—0x7E it is of this type. Used for control functions individually
 registered with the ISO-IR registry and, consequently, available even in
 contexts where a different C1 control code set is used. Specifically, they
 correspond to single control functions approved by ISO/IEC JTC 1/SC 2 and
 standardized by ISO or an ISO-recognised body.^[19]^: 6.5.1  Some of these are
 specified in ECMA-35 (ISO 2022 / ANSI X3.41), others in ECMA-48 (ISO 6429 /
 ANSI X3.64).^[19]^: 6.5.4  ECMA-48 refers to these as "independent control
 functions".^[5]^: 5.5 

                                   Some type
                       Link: 
    Fs (independent function) ANSI escape sequences recognised by terminals
                                          Abbr              Name      Effect
                                                                   Triggers a
                                                                   full reset
                                                                   of the
                                                                   terminal to
                                                                   its original
                                                                   state.^[20]
                                                                   This may
 Link:                        Link:                        Reset   include (if
   to      applicable):
 ESC c                        RIS                          Initial reset
                                                           State   graphic
                                                                   rendition,
                                                                   clear
                                                                   tabulation
                                                                   stops, reset
                                                                   to default
                                                                   font, and
                                                                   more.^[50]




  Fp Escape sequences[edit]

 If the ESC is followed by a byte in the range
 Link: 
 0x30—0x3F it is of this type. Set apart for private-use control
 functions.^[19]^: 6.5.3 

                                       Some type
                          Link: 
   Fp (private-use) escape sequences recognised by the VT100, its successors, and/or
                           terminal emulators such as xterm
                                         Abbr              Name          Effect
                                                                  Saves the cursor
Link:                        Link:                        DEC     position, encoding
  Save    shift state and
ESC 7                        DECSC                        Cursor  formatting
                                                                  attributes.^[51]^[20]
                                                                  Restores the cursor
                                                                  position, encoding
                                                                  shift state and
Link:                        Link:                        DEC     formatting attributes
  Restore from the previous
ESC 8                        DECRC                        Cursor  DECSC if any,
                                                                  otherwise resets
                                                                  these all to their
                                                                  defaults.^[51]^[20]





  nF Escape sequences[edit]

 If the ESC is followed by a byte in the range
 Link: 
 0x20—0x2F it is of this type. Followed by any number of additional bytes in
 this range, and then a byte in the range
 Link: 
 0x30-0x7E. They are further subcategorised by the low four bits of the first
 byte, e.g. "type 2F" for sequences where the first byte is
 Link: 
 0x22; and by whether the final byte is in the private use range
 Link: 
 0x30—0x3F (e.g. "type 2Fp") or not (e.g. "type 2Ft").^[19]^: 13.2.1  They are
 mostly used for ANSI/ISO code-switching mechanisms such as those used by
 ISO-2022-JP, except for type 3F sequences (those where the first intermediate
 byte is 0x23), which are used for individual control functions. Type 3Ft
 sequences are reserved for additional ISO-IR registered individual control
 functions,^[19]^: 6.5.2  while type 3Fp sequences are available for
 private-use control functions.^[19]^: 6.5.3 

                                   Some type
                       Link: 
    0Ft (announcement) ANSI escape sequences recognised by terminals (not an
                                exhaustive list)
                               Abbr       Name                Effect
                                        Announce    Defined in ECMA-35 (ANSI
                                        Code        X3.41 / ISO
 Link:                          ACS6    Structure 6 2022).^[19]^: 15.2  Makes
    S7C1T   Send 7-bit  the function keys send ESC
 ESC SP F                               C1 Control  + letter instead of C1
                                        Character   codes.^[20]
                                        to the Host
                                        Announce
                                        Code        Defined in
 Link:                          ACS7    Structure 7 ECMA-35.^[19]^: 15.2  Makes
    S8C1T   Send 8-bit  the function keys send C1
 ESC SP G                               C1 Control  codes.^[20]
                                        Character
                                        to the Host





                                         Some type
                             Link: 
3Fp (private-use) escape sequences recognised by the VT100, its successors, and/or terminal
                                  emulators such as xterm
                                         Abbr                 Name             Effect
                                                          DEC           Makes the current
Link:                        Link:                        Double-Height line use characters
  Letters, Top  twice as tall. This
ESC # 3                      DECDHL                       Half          code is for the top
                                                                        half.^[52]
                                                          DEC           Makes the current
Link:                        Link:                        Double-Height line use characters
  Letters,      twice as tall. This
ESC # 4                      DECDHL                       Bottom Half   code is for the
                                                                        bottom half.^[52]
                                                                        Makes the current
Link:                        Link:                        DEC           line use
  Single-Width  single-width
ESC # 5                      DECSWL                       Line          characters, per the
                                                                        default
                                                                        behaviour.^[53]^[20]
                                                                        Makes the current
                                                                        line use
Link:                        Link:                        DEC           double-width
  Double-Width  characters,
ESC # 6                      DECDWL                       Line          discarding any
                                                                        characters in the
                                                                        second half of the
                                                                        line.^[54]^[20]





  Examples[edit]

 CSI 2 J — This clears the screen and, on some devices, locates the cursor to
 the y,x position 1,1 (upper left corner).

 CSI 32 m — This makes text green. The green may be a dark, dull green, so you
 may wish to enable Bold with the sequence CSI 1 m which would make it bright
 green, or combined as CSI 32 ; 1 m. Some implementations use the Bold state to
 make the character Bright.

 CSI 0 ; 6 8 ; "DIR" ; 13 p — This reassigns the key F10 to send to the
 keyboard buffer the string "DIR" and ENTER, which in the DOS command line
 would display the contents of the current directory. (MS-DOS ANSI.SYS only)
 This was sometimes used for ANSI bombs. This is a private-use code (as
 indicated by the letter p), using a non-standard extension to include a
 string-valued parameter. Following the letter of the standard would consider
 the sequence to end at the letter D.

 CSI s — This saves the cursor position. Using the sequence CSI u will restore
 it to the position. Say the current cursor position is 7(y) and 10(x). The
 sequence CSI s will save those two numbers. Now you can move to a different
 cursor position, such as 20(y) and 3(x), using the sequence CSI 20 ; 3 H or
 CSI 20 ; 3 f. Now if you use the sequence CSI u the cursor position will
 return to 7(y) and 10(x). Some terminals require the DEC sequences ESC 7 / ESC
 8 instead which is more widely supported.

    In shell scripting[edit]

 ANSI escape codes are often used in UNIX and UNIX-like terminals to provide
 syntax highlighting. For example, on compatible terminals, the following list
 command color-codes file and directory names by type.

 ls --color

 Users can employ escape codes in their scripts by including them as part of
 standard output or standard error. For example, the following GNU sed command
 embellishes the output of the make command by displaying lines containing
 words starting with "WARN" in reverse video and words starting with "ERR" in
 bright yellow on a dark red background (letter case is ignored). The
 representations of the codes are highlighted.^[55]

make 2>&1 | sed -e 's/.*\bWARN.*/\x1b[7m&\x1b[0m/i' -e 's/.*\bERR.*/\x1b[93;41m&\x1b[0m/i'

 The following Bash function flashes the terminal (by alternately sending
 reverse and normal video mode codes) until the user presses a key.^[56]

flasher () { while true; do printf \\e[?5h; sleep 0.1; printf \\e[?5l; read -s -n1 -t1 && break; done; }

 This can be used to alert a programmer when a lengthy command terminates, such
 as with make ; flasher .^[57]

printf \\033c

 This will reset the console, similar to the command reset on modern Linux
 systems; however it should work even on older Linux systems and on other
 (non-Linux) UNIX variants.

    In C[edit]

 Output of example program on Gnome Terminal

#include <stdio.h>

int main(void)
{
    int i, j, n;

    for (i = 0; i < 11; i++) {
        for (j = 0; j < 10; j++) {
            n = 10 * i + j;
            if (n > 107) break;
            printf("\033[%dm %3d\033[m", n, n);
        }
        printf("\n");
    }
    return 0;
}

  Terminal input sequences[edit]

       This section does not cite any sources. Please help improve this section
 [IMG] by adding citations to reliable sources. Unsourced material may be
       challenged and removed. (September 2019) (Learn how and when to remove
       this template message)

 Pressing special keys on the keyboard, as well as outputting many xterm CSI,
 DCS, or OSC sequences, often produces a CSI, DCS, or OSC sequence, sent from
 the terminal to the computer as though the user typed it.

 When typing input on a terminal keypresses outside the normal main
 alphanumeric keyboard area can be sent to the host as ANSI sequences. For keys
 that have an equivalent output function, such as the cursor keys, these often
 mirror the output sequences. However, for most keypresses there isn't an
 equivalent output sequence to use.

 There are several encoding schemes, and unfortunately most terminals mix
 sequences from different schemes, so host software has to be able to deal with
 input sequences using any scheme. To complicate the matter, the VT terminals
 themselves have two schemes of input, normal mode and application mode that
 can be switched by the application.

 (draft section)

<char>                                         -> char
<esc> <nochar>                                 -> esc
<esc> <esc>                                    -> esc
<esc> <char>                                   -> Alt-keypress or keycode sequence
<esc> '[' <nochar>                             -> Alt-[
<esc> '[' (<modifier>) <char>                  -> keycode sequence, <modifier> is a decimal number and defaults to 1 (xterm)
<esc> '[' (<keycode>) (';'<modifier>) '~'      -> keycode sequence, <keycode> and <modifier> are decimal numbers and default to 1 (vt)

 If the terminating character is '~', the first number must be present and is a
 keycode number, the second number is an optional modifier value. If the
 terminating character is a letter, the letter is the keycode value, and the
 optional number is the modifier value.

 The modifier value defaults to 1, and after subtracting 1 is a bitmap of
 modifier keys being pressed: Meta-Ctrl-Alt-Shift. So, for example, <esc>[4;2~
 is Shift-End, <esc>[20~ is function key 9, <esc>[5C is Ctrl-Right.

 In other words, the modifier is the sum of the following numbers:

 Key pressed Number               Comment
             1      always added, the rest are optional
 Shift       1
 (Left) Alt  2
 Control     4
 Meta        8

vt sequences:
<esc>[1~    - Home        <esc>[16~   -             <esc>[31~   - F17
<esc>[2~    - Insert      <esc>[17~   - F6          <esc>[32~   - F18
<esc>[3~    - Delete      <esc>[18~   - F7          <esc>[33~   - F19
<esc>[4~    - End         <esc>[19~   - F8          <esc>[34~   - F20
<esc>[5~    - PgUp        <esc>[20~   - F9          <esc>[35~   -
<esc>[6~    - PgDn        <esc>[21~   - F10
<esc>[7~    - Home        <esc>[22~   -
<esc>[8~    - End         <esc>[23~   - F11
<esc>[9~    -             <esc>[24~   - F12
<esc>[10~   - F0          <esc>[25~   - F13
<esc>[11~   - F1          <esc>[26~   - F14
<esc>[12~   - F2          <esc>[27~   -
<esc>[13~   - F3          <esc>[28~   - F15
<esc>[14~   - F4          <esc>[29~   - F16
<esc>[15~   - F5          <esc>[30~   -

xterm sequences:
<esc>[A     - Up          <esc>[K     -             <esc>[U     -
<esc>[B     - Down        <esc>[L     -             <esc>[V     -
<esc>[C     - Right       <esc>[M     -             <esc>[W     -
<esc>[D     - Left        <esc>[N     -             <esc>[X     -
<esc>[E     -             <esc>[O     -             <esc>[Y     -
<esc>[F     - End         <esc>[1P    - F1          <esc>[Z     -
<esc>[G     - Keypad 5    <esc>[1Q    - F2
<esc>[H     - Home        <esc>[1R    - F3
<esc>[I     -             <esc>[1S    - F4
<esc>[J     -             <esc>[T     -

 <esc>[A to <esc>[D are the same as the ANSI output sequences. The <modifier>
 is normally omitted if no modifier keys are pressed, but most implementations
 always emit the <modifier> for F1-F4. (draft section)

 Xterm has a comprehensive documentation page on the various function-key and
 mouse input sequence schemes from DEC's VT terminals and various other
 terminals it emulates.^[20] Thomas Dickey has added a lot of support to it
 over time;^[58] he also maintains a list of default keys used by other
 terminal emulators for comparison.^[59]

   • On the Linux console, certain function keys generate sequences of the form
     CSI [ char. The CSI sequence should terminate on the [.
   • Old versions of Terminator generate SS3 1; modifiers char when F1–F4 are
     pressed with modifiers. The faulty behavior was copied from GNOME
     Terminal.^[citation needed]
   • xterm replies CSI row ; column R if asked for cursor position and CSI 1 ;
     modifiers R if the F3 key is pressed with modifiers, which collide in the
     case of row == 1. This can be avoided by using the ? private modifier as
     CSI ? 6 n, which will be reflected in the response as CSI ? row ; column
     R.
   • many terminals prepend ESC to any character that is typed with the alt key
     down. This creates ambiguity for uppercase letters and symbols @[\]^_,
     which would form C1 codes.^[clarification needed]
   • Konsole generates SS3 modifiers char when F1–F4 are pressed with
     modifiers.^[clarification needed]

See also[edit]

   • ANSI art
   • Control character
   • Advanced Video Attribute Terminal Assembler and Recreator (AVATAR)
   • ISO/IEC JTC 1/SC 2
   • C0 and C1 control codes

Notes[edit]

  1. ^ The screen display could be replaced by drawing the entire new screen's
     contents at the bottom, scrolling the previous screen up sufficiently to
     erase all the old text. The user would see the scrolling, and the hardware
     cursor would be left at the very bottom. Some early batch files achieved
     rudimentary "full screen" displays in this way.
  2. ^ Typical colors that are used when booting PCs and leaving them in text
     mode, which used a 16-entry color table. The colors are different in the
     EGA/VGA graphic modes.
  3. ^ Seen in Windows XP through Windows 8.1
  4. ^ Until PowerShell 6
  5. ^ Debug console, "Dark+" theme
  6. ^ Campbell theme, used as of Windows 10 version 1709. Also used by
     PowerShell 6.
  7. ^ For virtual terminals, from /etc/vtrgb.
  8. ^ On terminals based on CGA compatible hardware, such as ANSI.SYS running
     on DOS, this normal intensity foreground color is rendered as Orange. CGA
     RGBI monitors contained hardware to modify the dark yellow color to an
     orange/brown color by reducing the green component. See this ansi art
     Archived 25 July 2011 at the Wayback Machine as an example.

Text is available under the Creative Commons Attribution-ShareAlike
License; additional terms may apply. By using this site, you agree to the
Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of
the Wikimedia Foundation, Inc., a non-profit organization.
